using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using Firebase;
using Firebase.Database;
using Firebase.Unity.Editor;
using UTJ.FrameCapturer;
using System.Threading.Tasks;
using System.Threading;


public class RunAlgorithms : MonoBehaviour
{
    List<SensorData> data = new List<SensorData>();
    IDictionary<string, object> iDictDT;

    double[][] dummyData =
        {
           new double[] {1,0.02,-0.07,0.01    },
           new double[] {1,0.03,-0.09,0.01    },
           new double[] {0.99,0.04,-0.11,0.01 },
           new double[] {0.99,0.05,-0.13,0.01 },
           new double[] {0.99,0.06,-0.16,0.01 },
           new double[] {0.98,0.06,-0.19,0.01 },
           new double[] {0.97,0.06,-0.22,0.01 },
           new double[] {0.97,0.06,-0.24,0.01 },
           new double[] {0.96,0.06,-0.26,0.01 },
           new double[] {0.96,0.06,-0.28,0.01 },
           new double[] {0.95,0.06,-0.3,0.01  },
           new double[] {0.95,0.07,-0.32,0.02 },
           new double[] {0.94,0.07,-0.33,0.03 },
           new double[] {0.94,0.07,-0.34,0.03 },
           new double[] {0.93,0.07,-0.35,0.03 },
           new double[] {0.93,0.08,-0.37,0.03 },
           new double[] {0.92,0.08,-0.39,0.04 },
           new double[] {0.91,0.08,-0.4,0.03  },
           new double[] {0.9,0.09,-0.42,0.03  },
           new double[] {0.89,0.09,-0.44,0.04 },
           new double[] {0.89,0.1,-0.45,0.03  },
           new double[] {0.88,0.1,-0.46,0.04  },
           new double[] {0.88,0.1,-0.47,0.04  },
           new double[] {0.87,0.1,-0.48,0.04  },
           new double[] {0.87,0.1,-0.49,0.04  },
           new double[] {0.86,0.1,-0.49,0.04  },
           new double[] {0.86,0.11,-0.5,0.04  },
           new double[] {0.86,0.11,-0.5,0.04  },
           new double[] {0.86,0.11,-0.5,0.04  },
           new double[] {0.86,0.1,-0.5,0.04   },
           new double[] {0.86,0.1,-0.51,0.04  },
           new double[] {0.86,0.1,-0.51,0.04  },
           new double[] {0.85,0.1,-0.51,0.04  },
           new double[] {0.85,0.1,-0.51,0.04  },
           new double[] {0.85,0.1,-0.51,0.04  },
           new double[] {0.85,0.1,-0.51,0.04  },
           new double[] {0.86,0.1,-0.51,0.04  },
           new double[] {0.86,0.1,-0.51,0.04  },
           new double[] {0.86,0.09,-0.5,0.04  },
           new double[] {0.86,0.09,-0.5,0.04  },
           new double[] {0.87,0.09,-0.48,0.03 },
           new double[] {0.88,0.08,-0.46,0.03 },
           new double[] {0.9,0.07,-0.44,0.02  },
           new double[] {0.91,0.07,-0.42,0.02 },
           new double[] {0.92,0.07,-0.39,0.01 },
           new double[] {0.93,0.06,-0.35,0.01 },
           new double[] {0.95,0.06,-0.31,0.01 },
           new double[] {0.96,0.05,-0.29,0.01 },
           new double[] {0.97,0.05,-0.24,0.01 },
           new double[] {0.98,0.05,-0.21,0.01 },
           new double[] {0.98,0.04,-0.17,0.01 },
           new double[] {0.99,0.03,-0.15,0    },
           new double[] {0.99,0.03,-0.12,0    },
           new double[] {0.99,0.02,-0.1,0     },
           new double[] {1,0.02,-0.08,0       },
           new double[] {1,0.02,-0.07,0       },
           new double[] {1,0.03,-0.06,0       },
           new double[] {1,0.03,-0.05,0       },
           new double[] {1,0.03,-0.04,0       },
           new double[] {1,0.03,-0.03,0       },
           new double[] {1,0.02,-0.03,0       },
           new double[] {1,0.02,-0.02,0       },
           new double[] {1,0.02,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.02,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.03,0       },
           new double[] {1,0.01,-0.04,0       },
           new double[] {1,0.01,-0.04,0       },
           new double[] {1,0.01,-0.05,0       },
           new double[] {1,0.01,-0.07,0       },
           new double[] {1,0.01,-0.08,0       },
           new double[] {0.99,0,-0.11,0       },
           new double[] {0.99,0,-0.12,0       },
           new double[] {0.99,0.01,-0.15,-0.01},
           new double[] {0.98,0,-0.18,-0.01   },
           new double[] {0.98,0.01,-0.2,-0.01 },
           new double[] {0.97,0.01,-0.23,-0.01},
           new double[] {0.97,0.01,-0.25,-0.01},
           new double[] {0.96,0.01,-0.28,-0.01},
           new double[] {0.95,0.02,-0.3,-0.02 },
           new double[] {0.94,0.03,-0.33,-0.02},
           new double[] {0.93,0.03,-0.36,-0.02},
           new double[] {0.92,0.04,-0.38,-0.02},
           new double[] {0.91,0.04,-0.41,-0.02},
           new double[] {0.9,0.05,-0.43,-0.02 },
           new double[] {0.89,0.05,-0.45,-0.02},
           new double[] {0.88,0.05,-0.46,-0.01},
           new double[] {0.88,0.06,-0.48,-0.01},
           new double[] {0.87,0.06,-0.5,-0.01 },
           new double[] {0.86,0.07,-0.51,-0.01},
           //new double[] {0.86,0.07,-0.51,-0.01},
           //new double[] {0.85,0.07,-0.52,-0.01},
           //new double[] {0.84,0.07,-0.53,-0.01},
           //new double[] {0.84,0.08,-0.54,-0.01},
           //new double[] {0.84,0.08,-0.54,-0.01},
           //new double[] {0.83,0.08,-0.55,-0.01},
           //new double[] {0.83,0.08,-0.56,-0.01},
           //new double[] {0.82,0.08,-0.56,-0.01},
           //new double[] {0.82,0.08,-0.57,-0.01},
           //new double[] {0.81,0.09,-0.57,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.8,0.09,-0.59,-0.01 },
           //new double[] {0.81,0.09,-0.59,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.81,0.09,-0.58,-0.01},
           //new double[] {0.82,0.09,-0.57,-0.01},
           //new double[] {0.82,0.09,-0.56,-0.01},
           //new double[] {0.84,0.08,-0.54,-0.01},
           //new double[] {0.86,0.07,-0.51,-0.01},
           //new double[] {0.88,0.06,-0.47,-0.02},
           //new double[] {0.9,0.06,-0.43,-0.02 },
           //new double[] {0.91,0.05,-0.41,-0.03},
           //new double[] {0.93,0.05,-0.37,-0.02},
           //new double[] {0.94,0.05,-0.33,-0.02},
           //new double[] {0.96,0.05,-0.29,-0.02},
           //new double[] {0.96,0.04,-0.26,-0.02},
           //new double[] {0.97,0.04,-0.23,-0.02},
           //new double[] {0.98,0.04,-0.19,-0.01},
           //new double[] {0.99,0.04,-0.15,-0.01},
           //new double[] {0.99,0.04,-0.12,-0.01},
           //new double[] {0.99,0.04,-0.1,-0.01 },
           //new double[] {1,0.04,-0.08,0       },
           //new double[] {1,0.04,-0.06,0       },
           //new double[] {1,0.03,-0.05,0       },
           //new double[] {1,0.03,-0.05,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.03,-0.04,0       },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.04,-0.01   },
           //new double[] {1,0.02,-0.05,-0.01   },
           //new double[] {1,0.02,-0.05,-0.01   },
           //new double[] {1,0.03,-0.06,-0.01   },
           //new double[] {1,0.02,-0.07,-0.01   },
           //new double[] {1,0.03,-0.08,-0.01   },
           //new double[] {0.99,0.03,-0.1,-0.01 },
           //new double[] {0.99,0.03,-0.12,-0.01},
           //new double[] {0.99,0.03,-0.14,-0.02},
           //new double[] {0.98,0.03,-0.17,-0.02},
           //new double[] {0.98,0.03,-0.2,-0.02 },
           //new double[] {0.97,0.03,-0.23,-0.02},
           //new double[] {0.97,0.04,-0.25,-0.03},
           //new double[] {0.96,0.04,-0.27,-0.03},
           //new double[] {0.95,0.04,-0.3,-0.03 },
           //new double[] {0.94,0.04,-0.33,-0.03},
           //new double[] {0.94,0.05,-0.35,-0.04},
           //new double[] {0.93,0.05,-0.37,-0.04},
           //new double[] {0.92,0.05,-0.39,-0.04},
           //new double[] {0.91,0.05,-0.41,-0.04},
           //new double[] {0.9,0.05,-0.43,-0.03 },
           //new double[] {0.89,0.06,-0.45,-0.03},
           //new double[] {0.88,0.06,-0.47,-0.03},
           //new double[] {0.87,0.07,-0.49,-0.03},
           //new double[] {0.86,0.07,-0.51,-0.02},
           //new double[] {0.85,0.08,-0.53,-0.02},
           //new double[] {0.84,0.08,-0.53,-0.02},
           //new double[] {0.84,0.08,-0.54,-0.02},
           //new double[] {0.84,0.09,-0.54,-0.02},
           //new double[] {0.83,0.09,-0.54,-0.02},
           //new double[] {0.83,0.09,-0.55,-0.02},
           //new double[] {0.83,0.09,-0.54,-0.02},
           //new double[] {0.83,0.1,-0.54,-0.02 },
           //new double[] {0.83,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.54,-0.02 },
           //new double[] {0.84,0.1,-0.53,-0.02 },
           //new double[] {0.84,0.1,-0.53,-0.02 },
           //new double[] {0.84,0.1,-0.53,-0.02 },
           //new double[] {0.84,0.1,-0.53,-0.02 },
           //new double[] {0.85,0.1,-0.52,-0.02 },
           //new double[] {0.86,0.11,-0.5,-0.01 },
           //new double[] {0.87,0.11,-0.49,-0.01},
           //new double[] {0.88,0.1,-0.47,-0.01 },
           //new double[] {0.89,0.1,-0.45,-0.01 },
           //new double[] {0.9,0.09,-0.42,-0.01 },
           //new double[] {0.92,0.09,-0.39,-0.01},
           //new double[] {0.93,0.08,-0.36,-0.01},
           //new double[] {0.94,0.07,-0.33,-0.01},
           //new double[] {0.95,0.06,-0.3,-0.02 },
           //new double[] {0.96,0.06,-0.27,-0.01},
           //new double[] {0.97,0.06,-0.25,0    },
           //new double[] {0.97,0.06,-0.22,0    },
           //new double[] {0.98,0.05,-0.2,0     },
           //new double[] {0.98,0.05,-0.18,0    },
           //new double[] {0.99,0.05,-0.15,0.01 },
           //new double[] {0.99,0.04,-0.13,0.02 },
           //new double[] {0.99,0.03,-0.11,0.02 },
           //new double[] {1,0.02,-0.09,0.02    },
           //new double[] {1,0.02,-0.08,0.02    },
           //new double[] {1,0.02,-0.07,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0.01,-0.06,0.02    },
           //new double[] {1,0,-0.06,0.02       },
           //new double[] {1,0,-0.06,0.02       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.06,0.01       },
           //new double[] {1,0,-0.07,0.01       },
           //new double[] {1,0,-0.08,0.01       },
           //new double[] {1,0,-0.09,0.01       },
           //new double[] {0.99,0.01,-0.1,0.01  },
           //new double[] {0.99,0.01,-0.11,0    },
           //new double[] {0.99,0.01,-0.13,0    },
           //new double[] {0.99,0.01,-0.15,0    },
           //new double[] {0.99,0.02,-0.16,0    },
           //new double[] {0.98,0.02,-0.18,0    },
           //new double[] {0.98,0.02,-0.2,0     },
           //new double[] {0.98,0.03,-0.22,0    },
           //new double[] {0.97,0.04,-0.24,0    },
           //new double[] {0.96,0.05,-0.27,0    },
           //new double[] {0.95,0.06,-0.29,0    },
           //new double[] {0.95,0.06,-0.31,0    },
           //new double[] {0.94,0.07,-0.33,0    },
           //new double[] {0.93,0.07,-0.35,0    },
           //new double[] {0.93,0.07,-0.36,0    },
           //new double[] {0.92,0.07,-0.38,0    },
           //new double[] {0.91,0.07,-0.4,0     },
           //new double[] {0.91,0.07,-0.41,0    },
           //new double[] {0.9,0.07,-0.43,0     },
           //new double[] {0.89,0.08,-0.44,0    },
           //new double[] {0.88,0.08,-0.46,0    },
           //new double[] {0.88,0.08,-0.48,0.01 },
           //new double[] {0.87,0.08,-0.49,0.01 },
           //new double[] {0.86,0.09,-0.5,0.01  },
           //new double[] {0.86,0.09,-0.51,0.02 },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.85,0.1,-0.51,0.02  },
           //new double[] {0.86,0.1,-0.51,0.02  },
           //new double[] {0.86,0.1,-0.5,0.02   },
           //new double[] {0.86,0.1,-0.5,0.01   },
           //new double[] {0.86,0.1,-0.49,0.01  },
           //new double[] {0.87,0.1,-0.48,0.01  },
           //new double[] {0.87,0.1,-0.47,0.01  },
           //new double[] {0.88,0.1,-0.46,0.02  },
           //new double[] {0.89,0.1,-0.44,0.03  },
           //new double[] {0.9,0.09,-0.43,0.02  },
           //new double[] {0.91,0.09,-0.41,0.01 },
           //new double[] {0.92,0.08,-0.39,0    },
           //new double[] {0.92,0.08,-0.37,0    },
           //new double[] {0.94,0.07,-0.34,0.01 },
           //new double[] {0.95,0.07,-0.32,0.01 },
           //new double[] {0.96,0.06,-0.29,0.01 },
           //new double[] {0.96,0.06,-0.27,0.01 },
           //new double[] {0.97,0.05,-0.25,0.01 },
           //new double[] {0.97,0.05,-0.23,0.01 },
           //new double[] {0.98,0.04,-0.21,0.01 },
           //new double[] {0.98,0.04,-0.18,0.02 },
           //new double[] {0.99,0.04,-0.16,0.02 },
           //new double[] {0.99,0.03,-0.12,0.02 },
           //new double[] {1,0.03,-0.09,0.02    },
           //new double[] {1,0.03,-0.05,0.02    },
           //new double[] {1,0.03,-0.03,0.02    },
           //new double[] {1,0.03,-0.01,0.02    },
           //new double[] {1,0.03,0.01,0.02     },
           //new double[] {1,0.03,0.03,0.02     },
           //new double[] {1,0.03,0.04,0.02     },
           //new double[] {1,0.03,0.05,0.01     },
           //new double[] {1,0.05,0.06,0.01     },
           //new double[] {1,0.05,0.07,0.01     },
           //new double[] {1,0.05,0.08,0.01     },
           //new double[] {0.99,0.05,0.09,0.01  },
           //new double[] {0.99,0.05,0.1,0.01   },
           //new double[] {0.99,0.05,0.11,0.01  },
           //new double[] {0.99,0.05,0.12,0.01  },
           //new double[] {0.99,0.05,0.12,0.01  },
           //new double[] {0.99,0.05,0.13,0.01  },
           //new double[] {0.99,0.06,0.13,0.01  },
           //new double[] {0.99,0.06,0.14,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.06,0.14,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.15,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.05,0.14,0.01  },
           //new double[] {0.99,0.05,0.13,0.01  },
           //new double[] {0.99,0.05,0.12,0.01  },
           //new double[] {0.99,0.05,0.11,0.01  },
           //new double[] {0.99,0.04,0.09,0.01  },
           //new double[] {1,0.04,0.07,0.01     },
           //new double[] {1,0.05,0.06,0.01     },
           //new double[] {1,0.05,0.03,0        },
           //new double[] {1,0.05,0.01,0        },
           //new double[] {1,0.05,-0.01,0       },
           //new double[] {1,0.05,-0.04,0       },
           //new double[] {1,0.05,-0.06,0       },
           //new double[] {1,0.05,-0.09,0       },
           //new double[] {0.99,0.05,-0.11,0    },
           //new double[] {0.99,0.04,-0.14,0    },
           //new double[] {0.99,0.04,-0.15,0    },
           //new double[] {0.98,0.04,-0.18,0    },
           //new double[] {0.98,0.04,-0.2,0     },
           //new double[] {0.97,0.04,-0.22,0    },
           //new double[] {0.97,0.05,-0.24,0    },
           //new double[] {0.96,0.06,-0.26,-0.01},
           //new double[] {0.96,0.07,-0.28,-0.01},
           //new double[] {0.95,0.07,-0.3,-0.01 },
           //new double[] {0.95,0.07,-0.32,-0.01},
           //new double[] {0.94,0.07,-0.33,-0.01},
           //new double[] {0.94,0.07,-0.34,-0.01},
           //new double[] {0.93,0.07,-0.36,-0.01},
           //new double[] {0.92,0.07,-0.38,-0.01},
           //new double[] {0.92,0.07,-0.39,-0.01},
           //new double[] {0.91,0.07,-0.41,-0.01},
           //new double[] {0.9,0.08,-0.43,-0.01 },
           //new double[] {0.9,0.08,-0.44,-0.01 },
           //new double[] {0.89,0.08,-0.45,-0.01},
           //new double[] {0.88,0.08,-0.46,-0.01},
           //new double[] {0.88,0.08,-0.47,-0.01},
           //new double[] {0.88,0.08,-0.48,-0.01},
           //new double[] {0.87,0.08,-0.48,-0.01},
           //new double[] {0.87,0.08,-0.49,-0.01},
           //new double[] {0.87,0.08,-0.49,-0.01},
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.02 },
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.01 },
           //new double[] {0.86,0.08,-0.5,-0.02 },
           //new double[] {0.87,0.08,-0.49,-0.02},
           //new double[] {0.87,0.08,-0.49,-0.02},
           //new double[] {0.87,0.08,-0.49,-0.01},
           //new double[] {0.87,0.08,-0.48,-0.01},
           //new double[] {0.88,0.08,-0.47,-0.01},
           //new double[] {0.88,0.08,-0.46,-0.01},
           //new double[] {0.89,0.07,-0.45,-0.01},
           //new double[] {0.9,0.07,-0.43,-0.01 },
           //new double[] {0.91,0.07,-0.41,-0.01},
           //new double[] {0.92,0.07,-0.39,-0.01},
           //new double[] {0.93,0.06,-0.36,-0.01},
           //new double[] {0.94,0.06,-0.33,-0.01},
           //new double[] {0.95,0.05,-0.3,0     },
           //new double[] {0.96,0.05,-0.27,0    },
           //new double[] {0.97,0.04,-0.25,0    },
           //new double[] {0.98,0.03,-0.22,0    },
           //new double[] {0.98,0.03,-0.2,0     },
           //new double[] {0.98,0.03,-0.18,-0.01},
           //new double[] {0.99,0.02,-0.16,-0.02},
           //new double[] {0.99,0.02,-0.14,-0.01},
           //new double[] {0.99,0.03,-0.12,-0.01},
           //new double[] {1,0.02,-0.09,-0.01   },
           //new double[] {1,0.03,-0.06,0       },
           //new double[] {1,0.04,-0.04,0.01    },
           //new double[] {1,0.04,-0.02,0.01    },
           //new double[] {1,0.04,-0.01,0.02    },
           //new double[] {1,0.04,0.01,0.02     },
           //new double[] {1,0.04,0.03,0.02     },
           //new double[] {1,0.04,0.05,0.01     },
           //new double[] {1,0.04,0.06,0        },
           //new double[] {1,0.05,0.08,0.01     },
           //new double[] {0.99,0.06,0.1,0.01   },
           //new double[] {0.99,0.06,0.12,0.01  },
           //new double[] {0.99,0.05,0.13,0.01  },
           //new double[] {0.99,0.06,0.14,0.02  },
           //new double[] {0.99,0.05,0.15,0.02  },
           //new double[] {0.99,0.05,0.16,0.02  },
           //new double[] {0.98,0.04,0.17,0.02  },
           //new double[] {0.98,0.05,0.18,0.02  },
           //new double[] {0.98,0.05,0.19,0.02  },
           //new double[] {0.98,0.04,0.2,0.02   },
           //new double[] {0.98,0.04,0.21,0.02  },
           //new double[] {0.98,0.04,0.21,0.02  },
           //new double[] {0.98,0.04,0.21,0.03  },
           //new double[] {0.98,0.05,0.21,0.03  },
           //new double[] {0.98,0.05,0.21,0.03  },
           //new double[] {0.98,0.05,0.21,0.03  },
           //new double[] {0.98,0.04,0.21,0.03  },
           //new double[] {0.98,0.04,0.21,0.03  },
           //new double[] {0.98,0.04,0.21,0.03  },
           //new double[] {0.98,0.04,0.2,0.03   },
           //new double[] {0.98,0.04,0.2,0.03   },
           //new double[] {0.98,0.04,0.2,0.03   },
           //new double[] {0.98,0.04,0.19,0.03  },
           //new double[] {0.98,0.03,0.18,0.03  },
           //new double[] {0.98,0.03,0.17,0.03  },
           //new double[] {0.99,0.03,0.15,0.03  },
           //new double[] {0.99,0.02,0.13,0.03  },
           //new double[] {0.99,0.02,0.12,0.03  },
           //new double[] {0.99,0.01,0.1,0.03   },
           //new double[] {1,0.01,0.08,0.03     },
           //new double[] {1,0,0.06,0.03        },
           //new double[] {1,0,0.03,0.03        },
           //new double[] {1,-0.01,0.02,0.03    },
           //new double[] {1,-0.01,0,0.03       },
           //new double[] {1,-0.01,-0.03,0.05   },
           //new double[] {1,-0.01,-0.06,0.05   },
           //new double[] {1,-0.02,-0.08,0.05   },
           //new double[] {0.99,-0.01,-0.1,0.05 },
           //new double[] {0.99,-0.01,-0.12,0.05},
           //new double[] {0.99,-0.01,-0.14,0.05},
           //new double[] {0.99,-0.01,-0.16,0.05},
           //new double[] {0.98,-0.01,-0.18,0.05},
           //new double[] {0.98,-0.01,-0.2,0.05 },
           //new double[] {0.98,-0.01,-0.21,0.05},
           //new double[] {0.97,-0.01,-0.23,0.05},
           //new double[] {0.97,-0.02,-0.25,0.05},
           //new double[] {0.96,-0.02,-0.27,0.05},
           //new double[] {0.96,-0.02,-0.29,0.05},
           //new double[] {0.95,-0.02,-0.3,0.05 },
           //new double[] {0.95,-0.02,-0.32,0.05},
           //new double[] {0.94,-0.02,-0.34,0.05},
           //new double[] {0.93,-0.02,-0.36,0.05},
           //new double[] {0.93,-0.02,-0.37,0.05},
           //new double[] {0.92,-0.01,-0.39,0.05},
           //new double[] {0.91,-0.01,-0.41,0.05},
           //new double[] {0.91,-0.01,-0.42,0.05},
           //new double[] {0.9,0,-0.43,0.05     },
           //new double[] {0.9,0,-0.44,0.05     },
           //new double[] {0.89,0,-0.45,0.04    },
           //new double[] {0.89,0,-0.45,0.04    },
           //new double[] {0.89,0,-0.46,0.04    },
           //new double[] {0.88,0,-0.47,0.04    },
           //new double[] {0.88,0,-0.47,0.04    },
           //new double[] {0.88,0,-0.48,0.04    },
           //new double[] {0.88,0,-0.48,0.04    },
           //new double[] {0.88,0,-0.48,0.04    },
           //new double[] {0.87,0,-0.48,0.04    },
           //new double[] {0.87,0.01,-0.48,0.05 },
           //new double[] {0.87,0.01,-0.48,0.05 },
           //new double[] {0.88,0.01,-0.48,0.05 },
           //new double[] {0.88,0.01,-0.48,0.05 },
           //new double[] {0.88,0.01,-0.48,0.05 },
           //new double[] {0.88,0.01,-0.47,0.05 },
           //new double[] {0.88,0.01,-0.47,0.05 },
           //new double[] {0.88,0.01,-0.46,0.05 },
           //new double[] {0.89,0.02,-0.46,0.05 },
           //new double[] {0.89,0.02,-0.45,0.05 },
           //new double[] {0.89,0.02,-0.45,0.05 },
           //new double[] {0.89,0.02,-0.45,0.05 },
           //new double[] {0.9,0.02,-0.44,0.05  },
           //new double[] {0.9,0.02,-0.43,0.05  },
           //new double[] {0.9,0.02,-0.42,0.05  },
           //new double[] {0.91,0.02,-0.4,0.05  },
           //new double[] {0.92,0.02,-0.38,0.06 },
           //new double[] {0.93,0.02,-0.35,0.06 },
           //new double[] {0.94,0.02,-0.33,0.06 },
           //new double[] {0.95,0.02,-0.3,0.06  },
           //new double[] {0.96,0.02,-0.26,0.07 },
           //new double[] {0.97,0.02,-0.22,0.07 },
           //new double[] {0.98,0.03,-0.19,0.08 },
           //new double[] {0.98,0.02,-0.16,0.08 },
           //new double[] {0.99,0.02,-0.13,0.08 },
           //new double[] {0.99,0.02,-0.1,0.08  },
           //new double[] {0.99,0.02,-0.07,0.09 },
           //new double[] {0.99,0.02,-0.05,0.09 },
           //new double[] {1,0.02,-0.02,0.09    },
           //new double[] {1,0.02,0.02,0.09     },
           //new double[] {0.99,0.02,0.04,0.09  },
           //new double[] {0.99,0.02,0.06,0.09  },
           //new double[] {0.99,0.02,0.09,0.09  },
           //new double[] {0.99,0.02,0.11,0.09  },
           //new double[] {0.99,0.02,0.13,0.1   },
           //new double[] {0.98,0.02,0.15,0.1   },
           //new double[] {0.98,0.01,0.16,0.1   },
           //new double[] {0.98,0.01,0.18,0.1   },
           //new double[] {0.98,0.01,0.2,0.1    },
           //new double[] {0.97,0.02,0.21,0.1   },
           //new double[] {0.97,0.02,0.22,0.1   },
           //new double[] {0.97,0.02,0.23,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.01,0.24,0.1   },
           //new double[] {0.97,0.01,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.24,0.1   },
           //new double[] {0.97,0.02,0.23,0.1   },
           //new double[] {0.97,0.02,0.23,0.1   },
           //new double[] {0.97,0.02,0.22,0.1   },
           //new double[] {0.97,0.02,0.21,0.1   },
           //new double[] {0.98,0.02,0.19,0.09  },
           //new double[] {0.98,0.02,0.17,0.09  },
           //new double[] {0.98,0.02,0.15,0.09  },
           //new double[] {0.99,0.02,0.13,0.09  },
           //new double[] {0.99,0.01,0.1,0.09   },
           //new double[] {0.99,0.01,0.07,0.08  },
           //new double[] {1,0,0.04,0.08        },
           //new double[] {1,-0.01,0.02,0.08    },
           //new double[] {1,-0.01,-0.01,0.08   },
           //new double[] {1,-0.02,-0.04,0.07   },
           //new double[] {1,-0.02,-0.06,0.07   },
           //new double[] {0.99,-0.02,-0.09,0.07},
           //new double[] {0.99,-0.03,-0.12,0.07},
           //new double[] {0.99,-0.03,-0.15,0.07},
           //new double[] {0.98,-0.03,-0.17,0.06},
           //new double[] {0.98,-0.03,-0.2,0.06 },
           //new double[] {0.97,-0.03,-0.23,0.06},
           //new double[] {0.96,-0.03,-0.26,0.06},
           //new double[] {0.96,-0.03,-0.28,0.06},
           //new double[] {0.95,-0.03,-0.3,0.06 },
           //new double[] {0.94,-0.02,-0.32,0.06},
           //new double[] {0.94,-0.02,-0.34,0.06},
           //new double[] {0.93,-0.01,-0.36,0.05},
           //new double[] {0.92,-0.01,-0.38,0.05},
           //new double[] {0.92,0,-0.4,0.05     },
           //new double[] {0.91,0,-0.41,0.06    },
           //new double[] {0.9,0.01,-0.43,0.06  },
           //new double[] {0.9,0.01,-0.43,0.06  },
           //new double[] {0.89,0.02,-0.44,0.06 },
           //new double[] {0.89,0.02,-0.45,0.06 },
           //new double[] {0.89,0.02,-0.46,0.06 },
           //new double[] {0.89,0.02,-0.46,0.05 },
           //new double[] {0.88,0.02,-0.46,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.47,0.05 },
           //new double[] {0.88,0.02,-0.46,0.05 },
           //new double[] {0.89,0.02,-0.46,0.05 },
           //new double[] {0.9,0.01,-0.44,0.05  },
           //new double[] {0.91,0.01,-0.42,0.06 },
           //new double[] {0.92,0.01,-0.39,0.06 },
           //new double[] {0.93,0.02,-0.36,0.07 },
           //new double[] {0.94,0.01,-0.33,0.07 },
           //new double[] {0.95,0.01,-0.3,0.07  },
           //new double[] {0.96,0.01,-0.28,0.07 },
           //new double[] {0.96,0.01,-0.26,0.07 },
           //new double[] {0.97,0,-0.23,0.07    },
           //new double[] {0.98,0,-0.2,0.07     },
           //new double[] {0.98,0,-0.18,0.07    },
           //new double[] {0.99,0,-0.15,0.07    },
           //new double[] {0.99,0,-0.13,0.07    },
           //new double[] {0.99,0,-0.11,0.07    },
           //new double[] {0.99,0,-0.08,0.08    },
           //new double[] {1,0,-0.05,0.08       },
           //new double[] {1,0,-0.03,0.08       },
           //new double[] {1,0,-0.01,0.08       },
           //new double[] {1,0,0.01,0.08        },
           //new double[] {1,0,0.02,0.08        },
           //new double[] {1,0,0.04,0.08        },
           //new double[] {0.99,0,0.07,0.08     },
           //new double[] {0.99,0,0.09,0.09     },
           //new double[] {0.99,-0.01,0.1,0.09  },
           //new double[] {0.99,-0.01,0.13,0.09 },
           //new double[] {0.99,-0.01,0.14,0.09 },
           //new double[] {0.98,-0.01,0.16,0.09 },
           //new double[] {0.98,0,0.17,0.09     },
           //new double[] {0.98,0,0.17,0.09     },
           //new double[] {0.98,0,0.18,0.09     },
           //new double[] {0.98,0,0.18,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.2,0.09      },
           //new double[] {0.98,0.01,0.19,0.09  },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.19,0.09     },
           //new double[] {0.98,0,0.18,0.09     },
           //new double[] {0.98,0.01,0.18,0.09  },
           //new double[] {0.98,0.01,0.16,0.09  },
           //new double[] {0.99,0,0.14,0.09     },
           //new double[] {0.99,0,0.11,0.09     },
           //new double[] {0.99,0,0.09,0.09     },
           //new double[] {0.99,-0.01,0.07,0.09 },
           //new double[] {1,-0.01,0.05,0.09    },
           //new double[] {1,-0.01,0.02,0.08    },
           //new double[] {1,-0.01,-0.01,0.08   },
           //new double[] {1,-0.02,-0.04,0.08   },
           //new double[] {1,-0.02,-0.06,0.08   },
           //new double[] {0.99,-0.02,-0.08,0.08},
           //new double[] {0.99,-0.01,-0.1,0.08 },
           //new double[] {0.99,-0.01,-0.12,0.08},
           //new double[] {0.99,-0.01,-0.14,0.08},
           //new double[] {0.98,-0.01,-0.16,0.07},
           //new double[] {0.98,-0.01,-0.17,0.07},
           //new double[] {0.98,-0.01,-0.2,0.07 },
           //new double[] {0.97,-0.01,-0.21,0.07},
           //new double[] {0.97,-0.01,-0.23,0.07},
           //new double[] {0.97,-0.01,-0.25,0.07},
           //new double[] {0.96,-0.01,-0.27,0.07},
           //new double[] {0.96,-0.01,-0.28,0.06},
           //new double[] {0.95,-0.01,-0.3,0.06 },
           //new double[] {0.95,-0.01,-0.31,0.06},
           //new double[] {0.94,0,-0.33,0.06    },
           //new double[] {0.94,0,-0.34,0.06    },
           //new double[] {0.93,0,-0.35,0.06    },
           //new double[] {0.93,0,-0.36,0.06    },
           //new double[] {0.93,0,-0.37,0.05    },
           //new double[] {0.92,0.01,-0.38,0.05 },
           //new double[] {0.92,0.01,-0.4,0.05  },
           //new double[] {0.91,0.01,-0.41,0.06 },
           //new double[] {0.91,0.02,-0.42,0.06 },
           //new double[] {0.9,0.02,-0.43,0.06  },
           //new double[] {0.9,0.02,-0.43,0.06  },
           //new double[] {0.9,0.02,-0.44,0.06  },
           //new double[] {0.9,0.03,-0.44,0.06  },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.45,0.06 },
           //new double[] {0.89,0.03,-0.44,0.06 },
           //new double[] {0.9,0.03,-0.43,0.06  },
           //new double[] {0.9,0.03,-0.42,0.06  },
           //new double[] {0.91,0.03,-0.4,0.07  },
           //new double[] {0.92,0.02,-0.38,0.08 },
           //new double[] {0.93,0.02,-0.36,0.08 },
           //new double[] {0.94,0.01,-0.34,0.08 },
           //new double[] {0.95,0.01,-0.32,0.08 },
           //new double[] {0.95,0.01,-0.29,0.08 },
           //new double[] {0.96,0.01,-0.25,0.08 },
           //new double[] {0.97,0,-0.22,0.08    },
           //new double[] {0.98,0,-0.19,0.08    },
           //new double[] {0.98,0,-0.16,0.08    },
           //new double[] {0.99,0,-0.13,0.08    },
           //new double[] {0.99,0,-0.1,0.08     },
           //new double[] {0.99,-0.01,-0.08,0.09},
           //new double[] {0.99,-0.01,-0.05,0.09},
           //new double[] {1,-0.01,-0.03,0.09   },
           //new double[] {1,-0.01,0,0.09       },
           //new double[] {1,-0.02,0.02,0.09    },
           //new double[] {0.99,-0.02,0.05,0.09 },
           //new double[] {0.99,-0.02,0.07,0.09 },
           //new double[] {0.99,-0.02,0.09,0.09 },
           //new double[] {0.99,-0.02,0.1,0.09  },
           //new double[] {0.99,-0.02,0.12,0.1  },
           //new double[] {0.99,-0.02,0.13,0.1  },
           //new double[] {0.99,-0.02,0.14,0.1  },
           //new double[] {0.98,-0.02,0.15,0.1  },
           //new double[] {0.98,-0.02,0.16,0.09 },
           //new double[] {0.98,-0.02,0.17,0.09 },
           //new double[] {0.98,-0.02,0.17,0.09 },
           //new double[] {0.98,-0.02,0.18,0.09 },
           //new double[] {0.98,-0.02,0.18,0.09 },
           //new double[] {0.98,-0.02,0.19,0.09 },
           //new double[] {0.98,-0.02,0.19,0.09 },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.97,-0.02,0.2,0.09  },
           //new double[] {0.97,-0.02,0.2,0.09  },
           //new double[] {0.97,-0.02,0.21,0.09 },
           //new double[] {0.97,-0.03,0.21,0.09 },
           //new double[] {0.97,-0.02,0.21,0.09 },
           //new double[] {0.97,-0.02,0.21,0.09 },
           //new double[] {0.97,-0.02,0.21,0.09 },
           //new double[] {0.97,-0.02,0.21,0.09 },
           //new double[] {0.98,-0.02,0.2,0.09  },
           //new double[] {0.98,-0.02,0.19,0.09 },
           //new double[] {0.98,-0.02,0.19,0.08 },
           //new double[] {0.98,-0.02,0.18,0.08 },
           //new double[] {0.98,-0.02,0.16,0.08 },
           //new double[] {0.99,-0.02,0.15,0.08 },
           //new double[] {0.99,-0.02,0.13,0.08 },
           //new double[] {0.99,-0.02,0.11,0.08 },
           //new double[] {0.99,-0.03,0.09,0.08 },
           //new double[] {0.99,-0.03,0.06,0.08 },
           //new double[] {0.99,-0.04,0.04,0.08 },
           //new double[] {1,-0.04,0.03,0.08    },
           //new double[] {1,-0.04,0,0.08       },
           //new double[] {1,-0.04,-0.02,0.08   },
           //new double[] {0.99,-0.05,-0.05,0.08},
           //new double[] {0.99,-0.05,-0.08,0.08},
           //new double[] {0.99,-0.05,-0.1,0.08 },
           //new double[] {0.99,-0.05,-0.13,0.08},
           //new double[] {0.98,-0.04,-0.16,0.08},
           //new double[] {0.98,-0.04,-0.17,0.08},
           //new double[] {0.98,-0.04,-0.2,0.08 },
           //new double[] {0.97,-0.04,-0.23,0.08},
           //new double[] {0.96,-0.03,-0.25,0.08},
           //new double[] {0.96,-0.03,-0.28,0.08},
           //new double[] {0.95,-0.03,-0.3,0.08 },
           //new double[] {0.95,-0.02,-0.32,0.08},
           //new double[] {0.94,-0.01,-0.34,0.08},
           //new double[] {0.93,0,-0.36,0.08    },
           //new double[] {0.93,0,-0.37,0.08    },
           //new double[] {0.92,0,-0.38,0.08    },
           //new double[] {0.92,0.01,-0.4,0.07  },
           //new double[] {0.91,0.01,-0.41,0.07 },
           //new double[] {0.91,0.02,-0.41,0.07 },
           //new double[] {0.9,0.02,-0.42,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.44,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.08  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.03,-0.43,0.07  },
           //new double[] {0.9,0.02,-0.43,0.07  },
           //new double[] {0.9,0.02,-0.42,0.07  },
           //new double[] {0.91,0.01,-0.42,0.07 },
           //new double[] {0.91,0.01,-0.41,0.07 },
           //new double[] {0.91,0,-0.4,0.07     },
           //new double[] {0.92,-0.01,-0.39,0.07},
           //new double[] {0.93,-0.01,-0.36,0.07},
           //new double[] {0.94,-0.02,-0.33,0.07},
           //new double[] {0.95,-0.02,-0.3,0.08 },
           //new double[] {0.96,-0.02,-0.27,0.08},
           //new double[] {0.97,-0.01,-0.23,0.08},
           //new double[] {0.98,-0.01,-0.19,0.09},
           //new double[] {0.98,-0.02,-0.16,0.1 },
           //new double[] {0.99,-0.01,-0.12,0.1 },
           //new double[] {0.99,-0.02,-0.08,0.11},
           //new double[] {0.99,-0.01,-0.04,0.12},
           //new double[] {0.99,-0.02,-0.02,0.13},
           //new double[] {0.99,-0.01,-0.01,0.14},
           //new double[] {0.99,-0.01,-0.01,0.14},
           //new double[] {0.99,0,0,0.14        },
           //new double[] {0.99,0.01,0.02,0.14  },
           //new double[] {0.99,0.01,0.03,0.14  },
           //new double[] {0.99,0.02,0.03,0.14  },
           //new double[] {0.99,0.02,0.03,0.14  },
           //new double[] {0.99,0.03,0.04,0.14  },
           //new double[] {0.99,0.04,0.04,0.14  },
           //new double[] {0.99,0.06,0.06,0.14  },
           //new double[] {0.98,0.08,0.06,0.14  },
           new double[] {0.98,0.11,0.06,0.14  }
        };

    // Occurence Stuff
    Dictionary<string, Dictionary<string, object>> occDics = new Dictionary<string, Dictionary<string, object>>();

    // MovieRecorder mRec = new MovieRecorder();

    int cummDataCount = 0;
    double cummERMScore = 0.0;
    uint updateCouter = 0; //1;

    const int num_joints = 7;
    public GameObject[] Joints = new GameObject[num_joints];
    Vector3[] jointPos = new Vector3[num_joints];

    UInt64 minuteStamp = 0;
    UInt64 serverDT = 0;
    ulong dbStamp;

    ERM erm = new ERM();
    Thread t;
    // Use this for initialization
    void Start()
    {
        Debug.Log("Started");


        #region Updates time on server and then reveiceves the value of time and prints it out (Testing)
        //Dictionary<string, object> dic = new Dictionary<string, object>();
        //dic.Add("currentTime", ServerValue.Timestamp);

        //Router.AssesmentWithID("-L5ohOlG020TA2K3tXrg").UpdateChildrenAsync(dic).ContinueWith(t =>
        //{
        //    if (t.IsFaulted)
        //    {
        //        // Handle the error...
        //        Debug.Log("Error Getting File (Once)!");
        //    }
        //    else if (t.IsCompleted)
        //    {
        //        #region GetValueAsync
        //        Router.AssesmentWithID("-L5ohOlG020TA2K3tXrg")//.Child("endDate")
        //          .GetValueAsync().ContinueWith(task =>
        //          {
        //              if (task.IsFaulted)
        //              {
        //                                // Handle the error...
        //                                Debug.Log("Error Getting File (Once)!");
        //              }
        //              else if (task.IsCompleted)
        //              {
        //                  DataSnapshot snapshot = task.Result;
        //                                // Do something with snapshot...
        //                                IDictionary<string, object> idict = (IDictionary<string, object>)snapshot.Value;
        //                  foreach (string s in idict.Keys)
        //                      Debug.Log("Key: " + s);

        //                  string str = idict["currentTime"].ToString();
        //                  Debug.Log("Snapshot: " + str);
        //                  DateTime dt = Milli2DateTime(str);
        //                  Debug.LogFormat("DateTime: {0}", dt.ToLocalTime().ToString());
        //                  Debug.Log(DateTime2Milli(dt));
        //              }
        //          });
        //        #endregion
        //    }

        //});
        #endregion

        #region Checks which Assessments are active and picks the employee ID of which ever one is.
        DatabaseManager.sharedInstance.GetActiveAssessments(result =>
        {
            Router.AID = result[0];
        });
        #endregion


        #region Pushes a set of dummy sensor Data to the server
        //t = new Thread(() =>
        //{
        //    PushDummySenData();
        //});
        //t.Start();
        #endregion

        //GrabDateTime();

        GrabAnalysisInfo();
        Debug.Log("Grabbed Analysis Info");

        //DatabaseManager.DeleteAllData();

        Thread.Sleep(1000);

        #region  Retrieves Sensor Data fron the Server
        //Router.DataWithEmpID(Router.EID).GetValueAsync().ContinueWith(t =>
        //{
        //    if (t.IsFaulted)
        //    {
        //        // Handle the error...
        //        Debug.Log("Error Getting File (Once)!");
        //    }
        //    else if (t.IsCompleted)
        //    {
        //        DataSnapshot dSnap = t.Result;
        //        IDictionary<string, object> iDictVal;

        //        List<List<List<SensorData>>> list1 = new List<List<List<SensorData>>>();
        //        List<List<object>> listIn = new List<List<object>>();
        //        List<List<SensorData>> list2 = new List<List<SensorData>>();
        //        List<SensorData> list3 = new List<SensorData>();

        //        iDictDT = (IDictionary<string, object>)dSnap.Value; // DateTimeStamp Level // IDictionary<string, object>
        //        //List<string> keyDT = new List<string>();
        //        foreach (string s in iDictDT.Keys)
        //        {
        //            // Gets the Key of the added snapshot converted to IDictionary. In this case, the key is the DateTimeStamp used to store sensorData on Firrebase.
        //            //keyDT.Add(s);
        //            Debug.Log("keyDT: " + s);
        //            listIn.Add((List<object>)iDictDT[s]); // DataCapture Level (#)

        //            int i = 0;
        //            foreach (List<object> L2 in listIn)// Loop through the DataCaptures (#)
        //            {
        //                Debug.Log("List Num: " + L2);
        //                int j = 0;
        //                foreach (object obj in L2)// Loop through each of the Sensors -> j
        //                {
        //                    iDictVal = (IDictionary<string, object>)obj;
        //                    //int k = 0;
        //                    foreach (IDictionary<string, object> iD_sData in iDictVal.Values) //Loop through each of the Quaternion Data -> k
        //                    {
        //                        Debug.Log("sData: " + iD_sData);
        //                        Debug.Log("J: " + j);
        //                        SensorData sense = new SensorData(iD_sData);
        //                        list3.Add(sense);
        //                        Debug.Log("Sense: " + sense.Qw);
        //                        //k++;
        //                    }
        //                    list2.Add(list3);
        //                    j++;
        //                }
        //                list1.Add(list2);
        //                i++;
        //            }
        //            float y;
        //            float.TryParse("0.256", out y);
        //            Debug.Log(y);
        //            Debug.Log("Added TempData");
        //            tempData.Add(list1);
        //        }
        //        Debug.Log("YEYEYEYEYEYE");
        //        Debug.Log("TempData: " + tempData[0][0][0][0].Qw);
        //    }

        //});
        #endregion

        #region Confirms whether increasing the millisecond value changes the DateTime value accurately
        //DateTime dt2 = DateTime.Now; // Get current Date&Time
        //Debug.Log("Current Time is: " + dt2);
        //string dd = DateTime2Milli(dt2); // Convert current Date&Time to millisecond (time since the Unix epoch)
        //Debug.Log("DD (Before adding 60000): " + dd);
        //UInt64 t = Convert.ToUInt64(dd); // Convert millisecond value from string to Uint64
        //Debug.Log("T : " + t);
        //t = t + 60000; // Increases millisecond value by 1 minute
        //Debug.Log("T (After adding 60000): " + t);
        //Debug.Log("New Time is: " + Milli2DateTime(t.ToString()));
        //IDictionary<string, object> idict2 = (IDictionary<string, object>)ServerValue.Timestamp;
        //foreach (string s in idict2.Keys)
        //{
        //    Debug.Log("Key2: " + s);
        //    Debug.Log("ServerValue: " + idict2[s].ToString());
        //}
        #endregion
    }


    // Update is called once per frame
    void Update()
    {
        //Debug.Log("i     " + i);
        //Debug.Log("k     " + k);
        //if (i >= DatabaseManager.Data.Count)
        //{
        //    //updateRiskOcc();
        //    Debug.Log("Updating!!!!");
        //}

        //bool[] risky = new bool[3];

        //if (k == i) // Used to keep risk calculations in sync with the incoming data. I.e. error doesn't calculate twice for every one data pt
        //{
        //    risky[0] = erm.checkBack((jointPos[2].z - jointPos[3].z) * 1000); // Compares the difference between waist location and neckish location and triggers risk when less than limit (Bending)
        //    risky[1] = erm.checkElbow_L((jointPos[0].z - jointPos[1].z) * 1000); // Compares the difference between Left elbow location and Left shou (waist) location and triggers risk when less than limit (Bending)
        //    risky[2] = erm.checkElbow_R((jointPos[6].z - jointPos[5].z) * 1000); // Compares the difference between shoulder location and back (waist) location and triggers risk when less than limit (Bending)

        //    if (risky[0] || risky[1] || risky[2])
        //    {
        //        Debug.Log("Risky 0 : " + risky[0]);
        //        Debug.Log("Risky 1 : " + risky[1]);
        //        Debug.Log("Risky 2 : " + risky[2]);
        //        cummERMScore += erm.ERM_Risk;Debug.Log("DatabaseManager.DTStamp: " + DatabaseManager.DTStamp);
        //        occDics[DatabaseManager.DTStamp].Add("ermScore", erm.ERM_Risk); 
        //        //occDics[DatabaseManager.DTStamp].Add("gif", );
        //    }
        //    k++;
        //}
    }

    void FixedUpdate()
    {
        #region Older Stuff - No Queue
        //if (DatabaseManager.DataChanged == true) //(i >= DatabaseManager.Data.Count && DatabaseManager.DataChanged == true)
        //{
        //    data = DatabaseManager.Data;
        //    dbStamp = DatabaseManager.DTStamp;
        //    DatabaseManager.DataChanged = false;
        //    cummDataCount++;
        //    updateCouter++;
        //}

        //if (data.Count == 7) //data.Count != 0)
        //{
        //    Joints[0].transform.rotation = SensData2Quat(data[0]);
        //    Joints[1].transform.rotation = SensData2Quat(data[1]);
        //    Joints[2].transform.rotation = SensData2Quat(data[2]);
        //    Joints[3].transform.rotation = SensData2Quat(data[3]);
        //    Joints[4].transform.rotation = SensData2Quat(data[4]);
        //    Joints[5].transform.rotation = SensData2Quat(data[5]);
        //    Joints[6].transform.rotation = SensData2Quat(data[6]);

        //    for (int z = 0; z < num_joints; z++)
        //    {
        //        jointPos[z] = Joints[z].transform.position;
        //    }

        //    bool[] risky = new bool[3];
        //    risky[0] = erm.checkBack((jointPos[2].z - jointPos[3].z) * 1000); // Compares the difference between waist location and neckish location and triggers risk when less than limit (Bending)
        //    risky[1] = erm.checkElbow_L((jointPos[0].z - jointPos[1].z) * 1000); // Compares the difference between Left elbow location and Left shou (waist) location and triggers risk when less than limit (Bending)
        //    risky[2] = erm.checkElbow_R((jointPos[6].z - jointPos[5].z) * 1000); // Compares the difference between shoulder location and back (waist) location and triggers risk when less than limit (Bending)

        //    if (risky[0] || risky[1] || risky[2])
        //    {
        //        //Debug.Log("Risky 0 : " + risky[0]);
        //        //Debug.Log("Risky 1 : " + risky[1]);
        //        //Debug.Log("Risky 2 : " + risky[2]);
        //        cummERMScore += erm.ERM_Risk;

        //        Dictionary<string, object> dit = new Dictionary<string, object>();
        //        dit.Add("ermScore", erm.ERM_Risk);
        //        string x = ((Convert.ToUInt64(DatabaseManager.DTStamp))).ToString();
        //        //Debug.LogFormat("X: {0}\ti: {1}", x, i);
        //        try
        //        {
        //            occDics.Add(x, dit); // "+ (i*50)" is used to determine the approx time of the sub-captures assuming 50ms per sub-capture
        //        }
        //        catch (ArgumentException AE)
        //        {
        //            Debug.LogError("key: " + x + " : " + AE.Message);
        //        }
        //        //occDics[DatabaseManager.DTStamp].Add("gif", );
        //        //updateRiskOcc();
        //    }

        //    if (updateCouter >= 50)
        //    {
        //        updateCouter = 0;
        //        updateRiskOcc();
        //    }

        //    data.Clear();
        //}
        #endregion

        #region Uses Queue
        if (DatabaseManager.InputQ.Count > 0 && DatabaseManager.DataChanged == true) //(i >= DatabaseManager.Data.Count && DatabaseManager.DataChanged == true)
        {
            data = DatabaseManager.InputQ.Dequeue();
            dbStamp = DatabaseManager.InputQTime.Dequeue();
            DatabaseManager.DataChanged = false;
            cummDataCount++;
            updateCouter++;


            if (data.Count == 7) //data.Count != 0)
            {
                Joints[0].transform.rotation = SensData2Quat(data[0]);
                Joints[1].transform.rotation = SensData2Quat(data[1]);
                Joints[2].transform.rotation = SensData2Quat(data[2]);
                Joints[3].transform.rotation = SensData2Quat(data[3]);
                Joints[4].transform.rotation = SensData2Quat(data[4]);
                Joints[5].transform.rotation = SensData2Quat(data[5]);
                Joints[6].transform.rotation = SensData2Quat(data[6]);

                Debug.LogFormat("Qw: {0}, QX: {1}, QY: {2}, QZ: {3}", SensData2Quat(data[5]).w, SensData2Quat(data[5]).x, SensData2Quat(data[5]).y, SensData2Quat(data[5]).z);

                for (int z = 0; z < num_joints; z++)
                {
                    jointPos[z] = Joints[z].transform.position;
                }

                bool[] risky = new bool[3];
                risky[0] = erm.checkBack((jointPos[2].z - jointPos[3].z) * 1000); // Compares the difference between waist location and neckish location and triggers risk when less than limit (Bending)
                risky[1] = erm.checkElbow_L((jointPos[0].z - jointPos[1].z) * 1000); // Compares the difference between Left elbow location and Left shou (waist) location and triggers risk when less than limit (Bending)
                risky[2] = erm.checkElbow_R((jointPos[6].z - jointPos[5].z) * 1000); // Compares the difference between shoulder location and back (waist) location and triggers risk when less than limit (Bending)

                if (risky[0] || risky[1] || risky[2])
                {
                    //Debug.Log("Risky 0 : " + risky[0]);
                    //Debug.Log("Risky 1 : " + risky[1]);
                    //Debug.Log("Risky 2 : " + risky[2]);
                    cummERMScore += erm.ERM_Risk;

                    Dictionary<string, object> dit = new Dictionary<string, object>();
                    dit.Add("ermScore", erm.ERM_Risk);
                    string x = dbStamp.ToString();
                    //Debug.LogFormat("X: {0}\ti: {1}", x, i);
                    try
                    {
                        occDics.Add(x, dit); // "+ (i*50)" is used to determine the approx time of the sub-captures assuming 50ms per sub-capture
                    }
                    catch (ArgumentException AE)
                    {
                        Debug.LogError("key: " + x + " : " + AE.Message);
                    }
                    //occDics[DatabaseManager.DTStamp].Add("gif", );
                    //updateRiskOcc();
                }

                if (updateCouter >= 100)
                {
                    //updateCouter = 0;
                    // t = new Thread(() =>
                    // {
                    //     updateRiskOcc();
                    // });
                    //t.Start();
                }

                data.Clear();
            }
        }
        #endregion
    }

    DateTime Milli2DateTime(string milli)
    {
        return new DateTime(1970, 1, 1).AddMilliseconds(double.Parse(milli) /** 1000*/);
    }

    string DateTime2Milli(DateTime dt)
    {
        DateTime firstDt = new DateTime(1970, 1, 1);
        return (Math.Truncate(dt.Subtract(firstDt).TotalMilliseconds) /*/ 1000*/).ToString();
    }

    void PushDummySenData()
    {
        Dictionary<string, object> dic = new Dictionary<string, object>();
        dic.Add("currentTime", ServerValue.Timestamp);
        Debug.Log("dummyLength: " + dummyData.Length);

        Router.AssesmentWithID(Router.AID).UpdateChildrenAsync(dic).ContinueWith(t =>
        {
            if (t.IsFaulted)
            {
                // Handle the error...
                Debug.Log("Error Getting File (Once)!");
            }
            else if (t.IsCompleted)
            {
                #region GetValueAsync
                Router.AssesmentWithID(Router.AID)//.Child("endDate")
              .GetValueAsync().ContinueWith(task =>
              {
                  if (task.IsFaulted)
                  {
                      // Handle the error...
                      Debug.Log("Error Getting File (Once)!");
                  }
                  else if (task.IsCompleted)
                  {
                      DataSnapshot snapshot = task.Result;
                      Debug.Log("In PushData");
                      // Do something with snapshot...
                      IDictionary<string, object> idict = (IDictionary<string, object>)snapshot.Value;
                      //foreach (string s in idict.Keys)

                      UInt64 u = Convert.ToUInt64(idict["currentTime"]);
                      serverDT = u;
                      minuteStamp = u;

                      Debug.Log("Now Pushing");
                      Dictionary<string, object> dic2 = new Dictionary<string, object>();
                      int i = 0;
                      foreach (double[] dat in dummyData) //(int i = 0; i < dummyData.Length; i++)
                      {
                          string str = (u).ToString();
                          //Debug.LogFormat("dat[0]: {0}\t dat[1]: {1}\t dat[2]: {2}\t dat[3]: {3}", dat[0], dat[1], dat[2], dat[3]);
                          dic2.Add("qw", dat[0]); dic2.Add("qx", dat[1]); dic2.Add("qy", dat[2]); dic2.Add("qz", dat[3]);
                          //Debug.LogFormat("dic2[\"qw\"]: {0}\t dic2[\"qx\"]: {1}\t dic2[\"qy\"]: {2}\t dic2[\"qz\"]: {3}", dic2["qw"], dic2["qx"], dic2["qy"], dic2["qz"]);
                          //Debug.Log("STR: " + str);
                          for (int y = 0; y < 7; y++)
                              Router.DataWithAssID(Router.AID).Child(str).Child(((char)(y + 65)).ToString()).SetValueAsync(dic2); //UpdateChildrenAsync
                          dic2.Clear();
                          u += 50;
                          i++;
                          //if (i == 100)
                          //{
                          //    Thread.Sleep(2000);
                          //    i = 0;
                          //}
                          //Thread.Sleep(500);
                      }

                  }
              });
                #endregion
            }

        });

    }

    void updateRiskOcc()
    {
        int count = cummDataCount;
        double score = cummERMScore;
        //cummDataCount = 0;
        //cummERMScore = 0;

        #region Updates the entries associated with the risk in the Assessment node on firebase
        Dictionary<string, object> totalOccDic = new Dictionary<string, object>();

        totalOccDic.Add("totalDataCount", count);
        totalOccDic.Add("totalErmScore", Math.Round(score, 2));

        //Debug.Log("In update - count: " + count);
        //Debug.Log("In update - score: " + score);

        Router.AssesmentWithID(Router.AID).UpdateChildrenAsync(totalOccDic).ContinueWith(tk =>
        {
            if (tk.IsFaulted)
            {
                // Handle the error...
                Debug.Log("Error Getting File (Once)!");
            }
            else if (tk.IsCompleted)
            {
                //Debug.LogFormat("Clearing Update - count: {0}   score: {1}", count, score);

            }
        });
        //    }
        //});
        #endregion

        #region Uploads the entries that goes into the occurences node on firebase
        foreach (string key in occDics.Keys)
        {
            foreach (Dictionary<string, object> occDic in occDics.Values)
                Router.OccurenceWithID(Router.AID).Child(key).UpdateChildrenAsync(occDic).ContinueWith(task =>
                {
                    occDics.Clear();
                });
        }
        #endregion
    }

    Quaternion SensData2Quat(SensorData sens)
    {
        return new Quaternion((float)Math.Round(sens.Qx, 2), (float)Math.Round(sens.Qy, 2), (float)Math.Round(sens.Qz, 2), (float)Math.Round(sens.Qw, 2));
    }

    void GrabDateTime()
    {
        Dictionary<string, object> timeStampDic = new Dictionary<string, object>();
        timeStampDic.Add("currentTime", ServerValue.Timestamp);

        Router.AssesmentWithID(Router.AID).UpdateChildrenAsync(timeStampDic).ContinueWith(t =>
        {
            if (t.IsFaulted)
            {
                // Handle the error...
                Debug.Log("Error Getting File (Once)!");
            }
            else if (t.IsCompleted)
            {
                #region GetValueAsync
                Router.AssesmentWithID(Router.AID)//.Child("endDate")
              .GetValueAsync().ContinueWith(task =>
              {
                  if (task.IsFaulted)
                  {
                      // Handle the error...
                      Debug.Log("Error Getting File (Once)!");
                  }
                  else if (task.IsCompleted)
                  {
                      DataSnapshot snapshot = task.Result;
                      // Do something with snapshot...
                      IDictionary<string, object> idict = (IDictionary<string, object>)snapshot.Value;

                      serverDT = Convert.ToUInt64(idict["currentTime"]);

                      Debug.Log("serverDT in Get: " + serverDT);
                  }
              });
                #endregion
            }

        });
    }

    void GrabAnalysisInfo()
    {
        Router.AssesmentWithID(Router.AID)
          .GetValueAsync().ContinueWith(task =>
          {
              if (task.IsFaulted)
              {
                  // Handle the error...
                  Debug.Log("Error Getting File (Once)!");
              }
              else if (task.IsCompleted)
              {
                  DataSnapshot snapshot = task.Result;

                  // Do something with snapshot...
                  IDictionary<string, object> idict = (IDictionary<string, object>)snapshot.Value;


                  cummDataCount = Convert.ToInt32(idict["totalDataCount"]);
                  cummERMScore = Convert.ToDouble(idict["totalErmScore"]);
              }
          });
    }


}
